apply plugin: 'com.android.application'

def javaVersion = JavaVersion.VERSION_1_7;
def bakPath = file("${buildDir}/bakApk")
android {
    compileSdkVersion 27
    defaultConfig {
        applicationId "cn.chinapost.com.tinker"
        minSdkVersion 15
        targetSdkVersion 27
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    signingConfigs {
        //签名打包
        release {
            storeFile file("youdo.jks")
            storePassword "zdy123456"
            keyAlias "zhengdeyun"
            keyPassword "zdy123456"
        }
    }


    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
    }

    defaultConfig {
        javaCompileOptions {
            annotationProcessorOptions {
                includeCompileClasspath = true
            }
        }
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation 'com.android.support:appcompat-v7:27.1.1'
    implementation 'com.android.support.constraint:constraint-layout:1.1.3'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
    //生成application的时候使用
    provided "com.tencent.tinker:tinker-android-anno:${TINKER_VERSION}"
    //tinker的sdk库
    compile "com.tencent.tinker:tinker-android-lib:${TINKER_VERSION}"
    compile 'com.android.support:multidex:1.0.3'
    compile 'com.squareup.okhttp3:okhttp:3.10.0'
    //okttp依赖
    compile 'de.hdodenhof:circleimageview:2.1.0'
    compile 'com.readystatesoftware.systembartint:systembartint:1.0.3'
    compile 'com.nostra13.universalimageloader:universal-image-loader:1.9.5'
    implementation files('libs/zxing.jar')
    implementation 'com.github.chrisbanes:PhotoView:2.1.0'
}


    ext {

        tinkerEnable = true;
        tikkerOldAplPath = "${bakPath}/app-release-0201-16-34-40.apk"
        tinkerID = "1.0"
        tinkerApplyMappingPath = "${bakPath}/app-release-0201-16-34-40-mapping.txt"
        tinkerApplyResourceMappingPath = "${bakPath}/app-release-0201-16-34-40-R.txt"
    }

    def buildWithTinker() {
        return ext.tinkerEnable;
    }

    def getOldApkPath() {
        return ext.tikkerOldAplPath;
    }

    def getApplyMappingPath() {

        return ext.tinkerApplyMappingPath
    }

    def getApplyResourceMappingPath() {

        return ext.tinkerApplyResourceMappingPath
    }

    def getTinkerIdValue() {
        return ext.tinkerID
    }

    if (buildWithTinker()) {

        //启用tinker
        apply plugin: 'com.tencent.tinker.patch'
        //所有tinker相关的参数配置
        tinkerPatch {

            oldApk = getOldApkPath();//指定old apk的路径

            ignoreWarning = false;//不忽略tinker的警告，有警告终止patch文件生成四大组件不行

            useSign = true;//强制patch文件使用签名

            tinkerEnable = buildWithTinker();//指定是否启用tinker

            buildConfig {
                //四个必须要配置的
                applyMapping = getApplyMappingPath()//指定old apk打包时候所使用的混淆文件

                applyResourceMapping = getApplyResourceMappingPath()//指定old apk打包资源

                tinkerId = getTinkerIdValue()//指定TinkerId

                keepDexApply = false
            }


            dex {
                dexMode = "jar" //jar ,raw
                pattern = ["classes*.dex", "assets/seconary-dex-?.jar"]//指定dex文件目录
                loader = ["cn.chinapost.com.tinker.application.MyTinkerApplication"]//加载patch包用到的类

            }

            lib {

                pattern = ["lib/*/*.so"]
            }
            res {
                pattern = ["res/*", "assets/*", "resources.arcs", "AndroidManifest.xml"]
//指定tinker可以修改的资源路径

                ignoreChange = ["assets/sample_meta.txt"]//指定不受影响的路径

                largeModSize = 100//资源修改大小的默认值
            }

            //patch的一些基本信息
            packageConfig {

                configField("patchMeassage", "fix the 1.0 version's bugs")

                configField("patchVersion", "1.0")

            }

        }


        List<String> flavors = new ArrayList<>();
        project.android.productFlavors.each { flavor ->
            flavors.add(flavor.name)
        }
        boolean hasFlavors = flavors.size() > 0
        /**
         * 复制基准包和其它必须文件到指定目录
         */
        android.applicationVariants.all { variant ->
            /**
             * task type, you want to bak
             */
            def taskName = variant.name
            def date = new Date().format("MMdd-HH-mm-ss")

            tasks.all {
                if ("assemble${taskName.capitalize()}".equalsIgnoreCase(it.name)) {

                    it.doLast {
                        copy {
                            def fileNamePrefix = "${project.name}-${variant.baseName}"
                            def newFileNamePrefix = hasFlavors ? "${fileNamePrefix}" : "${fileNamePrefix}-${date}"

                            def destPath = hasFlavors ? file("${bakPath}/${project.name}-${date}/${variant.flavorName}") : bakPath
                            from variant.outputs[0].outputFile
                            into destPath
                            rename { String fileName ->
                                fileName.replace("${fileNamePrefix}.apk", "${newFileNamePrefix}.apk")
                            }

                            from "${buildDir}/outputs/mapping/${variant.dirName}/mapping.txt"
                            into destPath
                            rename { String fileName ->
                                fileName.replace("mapping.txt", "${newFileNamePrefix}-mapping.txt")
                            }

                            from "${buildDir}/intermediates/symbols/${variant.dirName}/R.txt"
                            into destPath
                            rename { String fileName ->
                                fileName.replace("R.txt", "${newFileNamePrefix}-R.txt")
                            }
                        }
                    }
                }
            }
        }


        project.afterEvaluate {
            if (hasFlavors) {
                task(tinkerPatchAllFlavorRelease) {
                    group = 'tinker'
                    def originOldPath = getTinkerBuildFlavorDirectory()
                    for (String flavor : flavors) {
                        def tinkerTask = tasks.getByName("tinkerPatch${flavor.capitalize()}Release")
                        dependsOn tinkerTask
                        def preAssembleTask = tasks.getByName("process${flavor.capitalize()}ReleaseManifest")
                        preAssembleTask.doFirst {
                            String flavorName = preAssembleTask.name.substring(7, 8).toLowerCase() + preAssembleTask.name.substring(8, preAssembleTask.name.length() - 15)
                            project.tinkerPatch.oldApk = "${originOldPath}/${flavorName}/${project.name}-${flavorName}-release.apk"
                            project.tinkerPatch.buildConfig.applyMapping = "${originOldPath}/${flavorName}/${project.name}-${flavorName}-release-mapping.txt"
                            project.tinkerPatch.buildConfig.applyResourceMapping = "${originOldPath}/${flavorName}/${project.name}-${flavorName}-release-R.txt"
                        }
                    }
                }

                task(tinkerPatchAllFlavorDebug) {
                    group = 'tinker'
                    def originOldPath = getTinkerBuildFlavorDirectory()
                    for (String flavor : flavors) {
                        def tinkerTask = tasks.getByName("tinkerPatch${flavor.capitalize()}Debug")
                        dependsOn tinkerTask
                        def preAssembleTask = tasks.getByName("process${flavor.capitalize()}DebugManifest")
                        preAssembleTask.doFirst {
                            String flavorName = preAssembleTask.name.substring(7, 8).toLowerCase() + preAssembleTask.name.substring(8, preAssembleTask.name.length() - 13)
                            project.tinkerPatch.oldApk = "${originOldPath}/${flavorName}/${project.name}-${flavorName}-debug.apk"
                            project.tinkerPatch.buildConfig.applyMapping = "${originOldPath}/${flavorName}/${project.name}-${flavorName}-debug-mapping.txt"
                            project.tinkerPatch.buildConfig.applyResourceMapping = "${originOldPath}/${flavorName}/${project.name}-${flavorName}-debug-R.txt"
                        }

                    }
                }
            }
        }
    }